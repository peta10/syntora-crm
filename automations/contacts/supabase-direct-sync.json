{
  "name": "Airtable â†’ Supabase Contact Sync",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "cronExpression": "0 6 * * *"
            }
          ]
        }
      },
      "id": "schedule-trigger",
      "name": "Daily 6AM Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [240, 300],
      "notes": "Triggers daily at 6 AM to sync contacts from Airtable to Supabase"
    },
    {
      "parameters": {
        "authentication": "airtableTokenApi",
        "resource": "record",
        "operation": "search",
        "base": {
          "__rl": true,
          "value": "app1Z91z04fuR6Gd0",
          "mode": "id"
        },
        "table": {
          "__rl": true,
          "value": "Contacts",
          "mode": "name"
        },
        "options": {
          "returnAll": true,
          "sort": [
            {
              "field": "Last Modified",
              "direction": "desc"
            }
          ]
        }
      },
      "id": "fetch-airtable-contacts",
      "name": "Fetch Airtable Contacts",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [460, 300],
      "credentials": {
        "airtableTokenApi": {
          "id": "airtable-token",
          "name": "Airtable Token"
        }
      },
      "notes": "Fetch all contacts from Airtable, sorted by last modified"
    },
    {
      "parameters": {
        "url": "https://qcrgacxgwlpltdfpwkiz.supabase.co/rest/v1/crm_contacts?select=*",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "apikey",
              "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFjcmdhY3hnd2xwbHRkZnB3a2l6Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0NjE3MjEwMCwiZXhwIjoyMDYxNzQ4MTAwfQ.J7Gqiv3wCngG9AH2wGRvBMDrzyw1PELyQdQ49ATHInQ"
            },
            {
              "name": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFjcmdhY3hnd2xwbHRkZnB3a2l6Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0NjE3MjEwMCwiZXhwIjoyMDYxNzQ4MTAwfQ.J7Gqiv3wCngG9AH2wGRvBMDrzyw1PELyQdQ49ATHInQ"
            },
            {
              "name": "Prefer",
              "value": "return=representation"
            }
          ]
        }
      },
      "id": "fetch-supabase-contacts",
      "name": "Fetch Supabase Contacts",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [460, 480],
      "notes": "Fetch existing contacts from Supabase crm_contacts table"
    },
    {
      "parameters": {
        "language": "javaScript",
        "jsCode": "// Enhanced Business Contact Classification & Data Processing Logic for Supabase\nconst airtableContacts = $input.first().json;\nconst supabaseContacts = $input.last().json || [];\n\n// Create lookup map of existing contacts by airtable_id and email\nconst existingContactsMap = new Map();\nsupabaseContacts.forEach(contact => {\n  if (contact.airtable_id) {\n    existingContactsMap.set(contact.airtable_id, contact);\n  }\n  if (contact.email) {\n    existingContactsMap.set(contact.email.toLowerCase(), contact);\n  }\n});\n\n// Business email domains (personal domains)\nconst personalDomains = [\n  'gmail.com', 'hotmail.com', 'yahoo.com', 'outlook.com', \n  'icloud.com', 'aol.com', 'protonmail.com', 'mail.com',\n  'me.com', 'live.com', 'msn.com', 'ymail.com'\n];\n\nfunction classifyContact(email, companyName) {\n  if (!email) return 'unknown';\n  \n  const emailDomain = email.split('@')[1]?.toLowerCase();\n  \n  if (personalDomains.includes(emailDomain)) {\n    return companyName ? 'friend' : 'unknown';\n  } else {\n    return companyName ? 'client' : 'prospect';\n  }\n}\n\nfunction formatPhoneNumber(phone) {\n  if (!phone) return null;\n  // Remove all non-digits and format\n  const cleaned = phone.replace(/\\D/g, '');\n  if (cleaned.length === 10) {\n    return `(${cleaned.slice(0,3)}) ${cleaned.slice(3,6)}-${cleaned.slice(6)}`;\n  } else if (cleaned.length === 11 && cleaned[0] === '1') {\n    return `+1 (${cleaned.slice(1,4)}) ${cleaned.slice(4,7)}-${cleaned.slice(7)}`;\n  }\n  return phone; // Return original if can't format\n}\n\nfunction validateEmail(email) {\n  if (!email) return false;\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n}\n\nfunction validateUrl(url) {\n  if (!url) return null;\n  try {\n    // Add https:// if no protocol\n    if (!url.startsWith('http://') && !url.startsWith('https://')) {\n      url = 'https://' + url;\n    }\n    new URL(url);\n    return url;\n  } catch {\n    return null;\n  }\n}\n\nfunction calculateLeadScore(contactData, email, companyName) {\n  let score = 0;\n  \n  // Email domain scoring\n  if (email) {\n    const emailDomain = email.split('@')[1]?.toLowerCase();\n    if (emailDomain && !personalDomains.includes(emailDomain)) {\n      score += 10; // Business email\n    }\n  }\n  \n  // Company presence\n  if (companyName && companyName.trim().length > 0) {\n    score += 15;\n  }\n  \n  // LinkedIn profile\n  if (contactData['LinkedIn Profile']) {\n    score += 10;\n  }\n  \n  // Website\n  if (contactData['Website URL']) {\n    score += 5;\n  }\n  \n  // Phone number\n  if (contactData['Phone']) {\n    score += 5;\n  }\n  \n  return Math.min(score, 100); // Cap at 100\n}\n\nconst processedContacts = [];\nconst errors = [];\nconst stats = {\n  total: 0,\n  new: 0,\n  updated: 0,\n  skipped: 0,\n  errors: 0\n};\n\n// Process each Airtable contact\nfor (const record of airtableContacts.records || []) {\n  stats.total++;\n  \n  try {\n    const fields = record.fields;\n    \n    // Skip if missing required fields\n    if (!fields['First Name'] || !fields['Last Name']) {\n      errors.push({\n        recordId: record.id,\n        error: 'Missing required fields: First Name or Last Name',\n        data: fields\n      });\n      stats.skipped++;\n      continue;\n    }\n    \n    // Validate email\n    const email = fields['Email'];\n    if (email && !validateEmail(email)) {\n      errors.push({\n        recordId: record.id,\n        error: 'Invalid email format',\n        email: email\n      });\n      stats.skipped++;\n      continue;\n    }\n    \n    // Check if contact exists\n    const existingContact = existingContactsMap.get(record.id) || \n                           (email ? existingContactsMap.get(email.toLowerCase()) : null);\n    \n    // Classify contact type\n    const companyName = fields['Company Name']?.trim() || null;\n    const contactType = classifyContact(email, companyName);\n    const leadScore = calculateLeadScore(fields, email, companyName);\n    \n    // Build contact object for Supabase\n    const contactData = {\n      airtable_id: record.id,\n      first_name: fields['First Name'].trim(),\n      last_name: fields['Last Name'].trim(),\n      email: email?.toLowerCase() || null,\n      phone: formatPhoneNumber(fields['Phone']),\n      company: companyName,\n      website: validateUrl(fields['Website URL']),\n      linkedin_url: validateUrl(fields['LinkedIn Profile']),\n      contact_type: contactType,\n      contact_source: 'airtable',\n      tags: existingContact?.tags ? \n        [...new Set([...existingContact.tags, 'airtable-sync'])] : \n        ['airtable-sync'],\n      // Preserve existing app-specific fields or set defaults\n      lead_score: existingContact?.lead_score || leadScore,\n      notes: existingContact?.notes || null,\n      last_contact_date: existingContact?.last_contact_date || null,\n      // Supabase timestamps\n      updated_at: new Date().toISOString()\n    };\n    \n    // Add created_at for new contacts\n    if (!existingContact) {\n      contactData.created_at = new Date().toISOString();\n    }\n    \n    // Determine operation type\n    let operationType = 'create';\n    let contactId = null;\n    \n    if (existingContact) {\n      operationType = 'update';\n      contactId = existingContact.id;\n      \n      // Check if update is needed (compare key fields)\n      const fieldsToCompare = ['first_name', 'last_name', 'email', 'phone', 'company', 'website', 'linkedin_url'];\n      const needsUpdate = fieldsToCompare.some(field => {\n        return contactData[field] !== existingContact[field];\n      });\n      \n      if (!needsUpdate) {\n        stats.skipped++;\n        continue; // Skip if no changes needed\n      }\n      \n      // Remove fields that shouldn't be updated\n      delete contactData.created_at;\n      delete contactData.id;\n      \n      stats.updated++;\n    } else {\n      stats.new++;\n    }\n    \n    processedContacts.push({\n      json: {\n        ...contactData,\n        id: contactId,\n        operation: operationType,\n        airtable_record_id: record.id\n      }\n    });\n    \n  } catch (error) {\n    errors.push({\n      recordId: record.id,\n      error: error.message,\n      data: record.fields\n    });\n    stats.errors++;\n  }\n}\n\n// Add summary data\nprocessedContacts.push({\n  json: {\n    _summary: true,\n    stats: stats,\n    errors: errors,\n    timestamp: new Date().toISOString(),\n    supabase_integration: true,\n    supabase_url: 'https://qcrgacxgwlpltdfpwkiz.supabase.co'\n  }\n});\n\nreturn processedContacts;"
      },
      "id": "process-contacts",
      "name": "Process & Classify Contacts",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 390],
      "notes": "Enhanced business logic for Supabase: classify contacts, detect changes, format data"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-summary",
              "leftValue": "={{ $json._summary }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "id": "filter-summary",
      "name": "Filter Summary",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [900, 390],
      "notes": "Separate summary data from contact records"
    },
    {
      "parameters": {
        "batchSize": 50,
        "options": {}
      },
      "id": "batch-contacts",
      "name": "Batch Process Contacts",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [1120, 300],
      "notes": "Process contacts in batches of 50 for optimal Supabase performance"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-create",
              "leftValue": "={{ $json.operation }}",
              "rightValue": "create",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "id": "route-operations",
      "name": "Route Create/Update",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [1340, 300],
      "notes": "Route to Supabase create or update operations"
    },
    {
      "parameters": {
        "url": "https://qcrgacxgwlpltdfpwkiz.supabase.co/rest/v1/crm_contacts",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "apikey",
              "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFjcmdhY3hnd2xwbHRkZnB3a2l6Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0NjE3MjEwMCwiZXhwIjoyMDYxNzQ4MTAwfQ.J7Gqiv3wCngG9AH2wGRvBMDrzyw1PELyQdQ49ATHInQ"
            },
            {
              "name": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFjcmdhY3hnd2xwbHRkZnB3a2l6Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0NjE3MjEwMCwiZXhwIjoyMDYxNzQ4MTAwfQ.J7Gqiv3wCngG9AH2wGRvBMDrzyw1PELyQdQ49ATHInQ"
            },
            {
              "name": "Prefer",
              "value": "return=representation"
            }
          ]
        },
        "sendBody": true,
        "contentType": "json",
        "jsonBody": "={\n  \"first_name\": \"{{ $json.first_name }}\",\n  \"last_name\": \"{{ $json.last_name }}\",\n  \"email\": \"{{ $json.email }}\",\n  \"phone\": \"{{ $json.phone }}\",\n  \"company\": \"{{ $json.company }}\",\n  \"website\": \"{{ $json.website }}\",\n  \"linkedin_url\": \"{{ $json.linkedin_url }}\",\n  \"contact_type\": \"{{ $json.contact_type }}\",\n  \"contact_source\": \"{{ $json.contact_source }}\",\n  \"tags\": {{ JSON.stringify($json.tags) }},\n  \"airtable_id\": \"{{ $json.airtable_id }}\",\n  \"lead_score\": {{ $json.lead_score || 0 }},\n  \"created_at\": \"{{ $json.created_at }}\",\n  \"updated_at\": \"{{ $json.updated_at }}\"\n}"
      },
      "id": "create-contacts-supabase",
      "name": "Create New Contacts (Supabase)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1560, 200],
      "notes": "Create new contacts directly in Supabase crm_contacts table"
    },
    {
      "parameters": {
        "url": "=https://qcrgacxgwlpltdfpwkiz.supabase.co/rest/v1/crm_contacts?id=eq.{{ $json.id }}",
        "method": "PATCH",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "apikey",
              "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFjcmdhY3hnd2xwbHRkZnB3a2l6Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0NjE3MjEwMCwiZXhwIjoyMDYxNzQ4MTAwfQ.J7Gqiv3wCngG9AH2wGRvBMDrzyw1PELyQdQ49ATHInQ"
            },
            {
              "name": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFjcmdhY3hnd2xwbHRkZnB3a2l6Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0NjE3MjEwMCwiZXhwIjoyMDYxNzQ4MTAwfQ.J7Gqiv3wCngG9AH2wGRvBMDrzyw1PELyQdQ49ATHInQ"
            },
            {
              "name": "Prefer",
              "value": "return=representation"
            }
          ]
        },
        "sendBody": true,
        "contentType": "json",
        "jsonBody": "={\n  \"first_name\": \"{{ $json.first_name }}\",\n  \"last_name\": \"{{ $json.last_name }}\",\n  \"email\": \"{{ $json.email }}\",\n  \"phone\": \"{{ $json.phone }}\",\n  \"company\": \"{{ $json.company }}\",\n  \"website\": \"{{ $json.website }}\",\n  \"linkedin_url\": \"{{ $json.linkedin_url }}\",\n  \"contact_type\": \"{{ $json.contact_type }}\",\n  \"airtable_id\": \"{{ $json.airtable_id }}\",\n  \"updated_at\": \"{{ $json.updated_at }}\"\n}"
      },
      "id": "update-contacts-supabase",
      "name": "Update Existing Contacts (Supabase)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1560, 400],
      "notes": "Update existing contacts directly in Supabase crm_contacts table"
    },
    {
      "parameters": {
        "mode": "combine",
        "mergeByFields": {
          "values": [
            {
              "field1": "timestamp",
              "field2": "timestamp"
            }
          ]
        },
        "options": {}
      },
      "id": "merge-results",
      "name": "Merge Results",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [1780, 300],
      "notes": "Combine create and update results from Supabase operations"
    },
    {
      "parameters": {
        "language": "javaScript",
        "jsCode": "// Generate comprehensive sync completion report for Supabase integration\nconst results = $input.all();\nconst timestamp = new Date().toISOString();\n\nlet totalProcessed = 0;\nlet successCount = 0;\nlet errorCount = 0;\nconst errors = [];\nconst supabaseOperations = [];\n\n// Process results from create and update operations\nresults.forEach(item => {\n  const data = item.json;\n  \n  if (data._summary) {\n    // This is the summary from processing\n    return;\n  }\n  \n  totalProcessed++;\n  \n  if (data.error || (Array.isArray(data) && data.some(d => d.error))) {\n    errorCount++;\n    const errorInfo = data.error || data.find(d => d.error)?.error || 'Unknown error';\n    errors.push({\n      operation: data.operation || 'unknown',\n      airtable_id: data.airtable_id,\n      error: errorInfo,\n      contact: {\n        name: `${data.first_name || 'Unknown'} ${data.last_name || 'Unknown'}`,\n        email: data.email,\n        company: data.company\n      }\n    });\n  } else {\n    successCount++;\n    // Track successful Supabase operations\n    if (data.id) {\n      supabaseOperations.push({\n        operation: data.operation || 'unknown',\n        supabase_id: data.id,\n        airtable_id: data.airtable_id,\n        name: `${data.first_name} ${data.last_name}`,\n        email: data.email\n      });\n    }\n  }\n});\n\n// Calculate success rate\nconst successRate = totalProcessed > 0 ? (successCount / totalProcessed * 100).toFixed(2) : 0;\n\nconst report = {\n  sync_completed_at: timestamp,\n  integration_type: 'supabase_direct',\n  supabase_project: 'qcrgacxgwlpltdfpwkiz',\n  summary: {\n    total_processed: totalProcessed,\n    successful: successCount,\n    failed: errorCount,\n    success_rate: `${successRate}%`\n  },\n  supabase_operations: supabaseOperations.slice(0, 10), // Sample of successful operations\n  errors: errors.slice(0, 10), // Limit to first 10 errors\n  total_errors: errors.length,\n  status: errorCount === 0 ? 'SUCCESS' : \n          errorCount < totalProcessed * 0.1 ? 'SUCCESS_WITH_WARNINGS' : 'FAILED',\n  real_time_sync_enabled: true,\n  apps_synchronized: ['web_app', 'windows_app']\n};\n\nreturn [{ json: report }];"
      },
      "id": "generate-report",
      "name": "Generate Supabase Sync Report",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2000, 300],
      "notes": "Generate comprehensive sync report with Supabase integration details"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-errors",
              "leftValue": "={{ $json.total_errors }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "or"
        }
      },
      "id": "check-errors",
      "name": "Has Errors?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [2220, 300],
      "notes": "Check if there were any errors during Supabase sync"
    },
    {
      "parameters": {
        "url": "YOUR_SLACK_WEBHOOK_URL",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "jsonBody": "={\"text\": \"ðŸš¨ Airtable â†’ Supabase Contact Sync Issues\", \"blocks\": [{\"type\": \"section\", \"text\": {\"type\": \"mrkdwn\", \"text\": \"*Airtable â†’ Supabase Contact Sync Completed with Issues*\\n\\nâ€¢ *Status*: {{ $json.status }}\\nâ€¢ *Integration*: Direct Supabase (Real-time sync enabled)\\nâ€¢ *Supabase Project*: {{ $json.supabase_project }}\\nâ€¢ *Total Processed*: {{ $json.summary.total_processed }}\\nâ€¢ *Successful*: {{ $json.summary.successful }}\\nâ€¢ *Failed*: {{ $json.summary.failed }}\\nâ€¢ *Success Rate*: {{ $json.summary.success_rate }}\\nâ€¢ *Apps Synchronized*: Web App, Windows App\\n\\n*Recent Errors:*\\n{{ $json.errors.map(e => `â€¢ ${e.contact.name} (${e.contact.email}): ${e.error}`).join('\\n').slice(0, 500) }}\"}}]}",
        "options": {}
      },
      "id": "send-error-notification",
      "name": "Send Error Notification",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2440, 200],
      "notes": "Send Slack notification for Supabase sync errors"
    },
    {
      "parameters": {
        "url": "YOUR_SLACK_WEBHOOK_URL",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "jsonBody": "={\"text\": \"âœ… Airtable â†’ Supabase Contact Sync Completed\", \"blocks\": [{\"type\": \"section\", \"text\": {\"type\": \"mrkdwn\", \"text\": \"*Daily Airtable â†’ Supabase Contact Sync Completed Successfully*\\n\\nâ€¢ *Integration*: Direct Supabase (Real-time sync)\\nâ€¢ *Supabase Project*: {{ $json.supabase_project }}\\nâ€¢ *Total Processed*: {{ $json.summary.total_processed }}\\nâ€¢ *Successful*: {{ $json.summary.successful }}\\nâ€¢ *Success Rate*: {{ $json.summary.success_rate }}\\nâ€¢ *Apps Synchronized*: Web App, Windows App\\nâ€¢ *Completed*: {{ $json.sync_completed_at }}\\n\\n*Real-time updates now available across all platforms! ðŸš€*\"}}]}",
        "options": {}
      },
      "id": "send-success-notification",
      "name": "Send Success Notification",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2440, 400],
      "notes": "Send Slack notification for successful Supabase sync"
    }
  ],
  "connections": {
    "Daily 6AM Trigger": {
      "main": [
        [
          {
            "node": "Fetch Airtable Contacts",
            "type": "main",
            "index": 0
          },
          {
            "node": "Fetch Supabase Contacts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Airtable Contacts": {
      "main": [
        [
          {
            "node": "Process & Classify Contacts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Supabase Contacts": {
      "main": [
        [
          {
            "node": "Process & Classify Contacts",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Process & Classify Contacts": {
      "main": [
        [
          {
            "node": "Filter Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Summary": {
      "main": [
        [],
        [
          {
            "node": "Batch Process Contacts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Batch Process Contacts": {
      "main": [
        [
          {
            "node": "Route Create/Update",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Create/Update": {
      "main": [
        [
          {
            "node": "Create New Contacts (Supabase)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Update Existing Contacts (Supabase)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create New Contacts (Supabase)": {
      "main": [
        [
          {
            "node": "Merge Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Existing Contacts (Supabase)": {
      "main": [
        [
          {
            "node": "Merge Results",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Results": {
      "main": [
        [
          {
            "node": "Generate Supabase Sync Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Supabase Sync Report": {
      "main": [
        [
          {
            "node": "Has Errors?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has Errors?": {
      "main": [
        [
          {
            "node": "Send Error Notification",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send Success Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner"
  },
  "versionId": "supabase-sync-v1.0",
  "meta": {
    "templateCredsSetupCompleted": false,
    "instanceId": "syntora-supabase-sync"
  },
  "id": "supabase-direct-sync",
  "tags": [
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "id": "syntora",
      "name": "syntora"
    },
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "id": "supabase",
      "name": "supabase"
    },
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "id": "real-time",
      "name": "real-time"
    }
  ]
}
